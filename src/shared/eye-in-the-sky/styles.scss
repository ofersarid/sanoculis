@import '/src/shared/styles';

$eyeWidthPortrait: 0.43 * $artWidthPortrait;
$eyeHeightPortrait: 0.53 * $eyeWidthPortrait;
$pupilRadPortrait: $eyeWidthPortrait / 9;

$eyeWidthLandscape: 0.43 * $artWidthLandscape;
$eyeHeightLandscape: 0.53 * $eyeWidthLandscape;
$pupilRadLandscape: $eyeWidthLandscape / 9;


$pupilOffset: 1.1;
$pupilDiagonalOffset: 0.3;

@keyframes blink {
  0% {
    height: 100px;
  }

  50% {
    height: 0px;
  }

  100% {
    height: 100px;
  }
}

.blink {
  animation: blink .4s forwards;
}

:global {
  #eye-in-the-sky {
    width: $eyeWidthPortrait;
    height: $eyeHeightPortrait;
    border: 3px solid;
    border-radius: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: .25s $ease;
    overflow: hidden;

    &.n .pupil {
      transform: translate(0, #{-($eyeHeightPortrait / 2) + ($pupilOffset * $pupilRadPortrait)});
    }

    &.ne .pupil {
      transform: translate(#{($eyeWidthPortrait / 4)}, #{-($eyeHeightPortrait / 4) + ($pupilDiagonalOffset * $pupilRadPortrait)});
    }

    &.e .pupil {
      transform: translate(#{($eyeWidthPortrait / 2) - ($pupilOffset * $pupilRadPortrait)}, 0);
    }

    &.se .pupil {
      transform: translate(#{($eyeWidthPortrait / 4)}, #{($eyeHeightPortrait / 4) - ($pupilDiagonalOffset * $pupilRadPortrait)});
    }

    &.s .pupil {
      transform: translate(0, #{($eyeHeightPortrait / 2) - ($pupilOffset * $pupilRadPortrait)});
    }

    &.sw .pupil {
      transform: translate(#{-($eyeWidthPortrait / 4)}, #{($eyeHeightPortrait / 4) - ($pupilDiagonalOffset * $pupilRadPortrait)});
    }

    &.w .pupil {
      transform: translate(#{-($eyeWidthPortrait / 2) + ($pupilOffset * $pupilRadPortrait)}, 0);
    }

    &.nw .pupil {
      transform: translate(#{-($eyeWidthPortrait / 4)}, #{-($eyeHeightPortrait / 4) + ($pupilDiagonalOffset * $pupilRadPortrait)});
    }

    .pupil {
      width: #{$pupilRadPortrait * 2};
      height: #{$pupilRadPortrait * 2};
      background: $black;
      border-radius: 100%;
      transition: transform 1.5s $ease;
    }
  }

  @include orientation('landscape') {
    #eye-in-the-sky {
      width: $eyeWidthLandscape;
      height: $eyeHeightLandscape;

      &.n .pupil {
        transform: translate(0, #{-($eyeHeightLandscape / 2) + ($pupilOffset * $pupilRadLandscape)});
      }

      &.ne .pupil {
        transform: translate(#{($eyeWidthLandscape / 4)}, #{-($eyeHeightLandscape / 4) + ($pupilDiagonalOffset * $pupilRadLandscape)});
      }

      &.e .pupil {
        transform: translate(#{($eyeWidthLandscape / 2) - ($pupilOffset * $pupilRadLandscape)}, 0);
      }

      &.se .pupil {
        transform: translate(#{($eyeWidthLandscape / 4)}, #{($eyeHeightLandscape / 4) - ($pupilDiagonalOffset * $pupilRadLandscape)});
      }

      &.s .pupil {
        transform: translate(0, #{($eyeHeightLandscape / 2) - ($pupilOffset * $pupilRadLandscape)});
      }

      &.sw .pupil {
        transform: translate(#{-($eyeWidthLandscape / 4)}, #{($eyeHeightLandscape / 4) - ($pupilDiagonalOffset * $pupilRadLandscape)});
      }

      &.w .pupil {
        transform: translate(#{-($eyeWidthLandscape / 2) + ($pupilOffset * $pupilRadLandscape)}, 0);
      }

      &.nw .pupil {
        transform: translate(#{-($eyeWidthLandscape / 4)}, #{-($eyeHeightLandscape / 4) + ($pupilDiagonalOffset * $pupilRadLandscape)});
      }

      .pupil {
        width: #{$pupilRadLandscape * 2};
        height: #{$pupilRadLandscape * 2};
      }
    }
  }
}
