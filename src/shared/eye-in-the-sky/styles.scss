@import '/src/shared/styles';

$eyeWidthPortrait: 0.43 * $artWidthPortrait;
$eyeHeightPortrait: 0.53 * $eyeWidthPortrait;
$pupilRadPortrait: $eyeWidthPortrait / 9;

$eyeWidthTablet: 0.43 * $artWidthTablet;
$eyeHeightTablet: 0.53 * $eyeWidthTablet;
$pupilRadTablet: $eyeWidthTablet / 9;

$eyeWidthDesktop: 0.43 * $artWidthDesktop;
$eyeHeightDesktop: 0.53 * $eyeWidthDesktop;
$pupilRadDesktop: $eyeWidthDesktop / 9;

$eyeWidthWideScreen: 0.43 * $artWidthWideScreen;
$eyeHeightWideScreen: 0.53 * $eyeWidthWideScreen;
$pupilRadWideScreen: $eyeWidthWideScreen / 9;


$pupilOffset: 1.1;
$pupilDiagonalOffset: 0.3;

@keyframes blink {
  0% {
    height: $eyeHeightPortrait;
  }

  50% {
    height: 0px;
  }

  100% {
    height: $eyeHeightPortrait;
  }
}

.blink {
  animation: blink .4s forwards;
}

:global {
  #eye-in-the-sky {
    width: $eyeWidthPortrait;
    height: $eyeHeightPortrait;
    border: 3px solid;
    border-radius: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: .25s $ease;
    overflow: hidden;

    &.n .pupil {
      transform: translate(0, #{-($eyeHeightPortrait / 2) + ($pupilOffset * $pupilRadPortrait)});
    }

    &.ne .pupil {
      transform: translate(#{($eyeWidthPortrait / 4)}, #{-($eyeHeightPortrait / 4) + ($pupilDiagonalOffset * $pupilRadPortrait)});
    }

    &.e .pupil {
      transform: translate(#{($eyeWidthPortrait / 2) - ($pupilOffset * $pupilRadPortrait)}, 0);
    }

    &.se .pupil {
      transform: translate(#{($eyeWidthPortrait / 4)}, #{($eyeHeightPortrait / 4) - ($pupilDiagonalOffset * $pupilRadPortrait)});
    }

    &.s .pupil {
      transform: translate(0, #{($eyeHeightPortrait / 2) - ($pupilOffset * $pupilRadPortrait)});
    }

    &.sw .pupil {
      transform: translate(#{-($eyeWidthPortrait / 4)}, #{($eyeHeightPortrait / 4) - ($pupilDiagonalOffset * $pupilRadPortrait)});
    }

    &.w .pupil {
      transform: translate(#{-($eyeWidthPortrait / 2) + ($pupilOffset * $pupilRadPortrait)}, 0);
    }

    &.nw .pupil {
      transform: translate(#{-($eyeWidthPortrait / 4)}, #{-($eyeHeightPortrait / 4) + ($pupilDiagonalOffset * $pupilRadPortrait)});
    }

    .pupil {
      width: #{$pupilRadPortrait * 2};
      height: #{$pupilRadPortrait * 2};
      background: $black;
      border-radius: 100%;
      transition: transform 1.5s $ease;
    }
  }

  @include orientation('landscape') {
    @keyframes blink {
      0% {
        height: $eyeHeightTablet;
      }

      50% {
        height: 0px;
      }

      100% {
        height: $eyeHeightTablet;
      }
    }

    #eye-in-the-sky {
      width: $eyeWidthTablet;
      height: $eyeHeightTablet;

      &.n .pupil {
        transform: translate(0, #{-($eyeHeightTablet / 2) + ($pupilOffset * $pupilRadTablet)});
      }

      &.ne .pupil {
        transform: translate(#{($eyeWidthTablet / 4)}, #{-($eyeHeightTablet / 4) + ($pupilDiagonalOffset * $pupilRadTablet)});
      }

      &.e .pupil {
        transform: translate(#{($eyeWidthTablet / 2) - ($pupilOffset * $pupilRadTablet)}, 0);
      }

      &.se .pupil {
        transform: translate(#{($eyeWidthTablet / 4)}, #{($eyeHeightTablet / 4) - ($pupilDiagonalOffset * $pupilRadTablet)});
      }

      &.s .pupil {
        transform: translate(0, #{($eyeHeightTablet / 2) - ($pupilOffset * $pupilRadTablet)});
      }

      &.sw .pupil {
        transform: translate(#{-($eyeWidthTablet / 4)}, #{($eyeHeightTablet / 4) - ($pupilDiagonalOffset * $pupilRadTablet)});
      }

      &.w .pupil {
        transform: translate(#{-($eyeWidthTablet / 2) + ($pupilOffset * $pupilRadTablet)}, 0);
      }

      &.nw .pupil {
        transform: translate(#{-($eyeWidthTablet / 4)}, #{-($eyeHeightTablet / 4) + ($pupilDiagonalOffset * $pupilRadTablet)});
      }

      .pupil {
        width: #{$pupilRadTablet * 2};
        height: #{$pupilRadTablet * 2};
      }
    }

    @include media('>tablet') {
      @keyframes blink {
        0% {
          height: $eyeHeightDesktop;
        }

        50% {
          height: 0px;
        }

        100% {
          height: $eyeHeightDesktop;
        }
      }

      #eye-in-the-sky {
        width: $eyeWidthDesktop;
        height: $eyeHeightDesktop;

        &.n .pupil {
          transform: translate(0, #{-($eyeHeightDesktop / 2) + ($pupilOffset * $pupilRadDesktop)});
        }

        &.ne .pupil {
          transform: translate(#{($eyeWidthDesktop / 4)}, #{-($eyeHeightDesktop / 4) + ($pupilDiagonalOffset * $pupilRadDesktop)});
        }

        &.e .pupil {
          transform: translate(#{($eyeWidthDesktop / 2) - ($pupilOffset * $pupilRadDesktop)}, 0);
        }

        &.se .pupil {
          transform: translate(#{($eyeWidthDesktop / 4)}, #{($eyeHeightDesktop / 4) - ($pupilDiagonalOffset * $pupilRadDesktop)});
        }

        &.s .pupil {
          transform: translate(0, #{($eyeHeightDesktop / 2) - ($pupilOffset * $pupilRadDesktop)});
        }

        &.sw .pupil {
          transform: translate(#{-($eyeWidthDesktop / 4)}, #{($eyeHeightDesktop / 4) - ($pupilDiagonalOffset * $pupilRadDesktop)});
        }

        &.w .pupil {
          transform: translate(#{-($eyeWidthDesktop / 2) + ($pupilOffset * $pupilRadDesktop)}, 0);
        }

        &.nw .pupil {
          transform: translate(#{-($eyeWidthDesktop / 4)}, #{-($eyeHeightDesktop / 4) + ($pupilDiagonalOffset * $pupilRadDesktop)});
        }

        .pupil {
          width: #{$pupilRadDesktop * 2};
          height: #{$pupilRadDesktop * 2};
        }
      }
    }

    @include media('>desktop') {
      @keyframes blink {
        0% {
          height: $eyeHeightWideScreen;
        }

        50% {
          height: 0px;
        }

        100% {
          height: $eyeHeightWideScreen;
        }
      }

      #eye-in-the-sky {
        width: $eyeWidthWideScreen;
        height: $eyeHeightWideScreen;

        &.n .pupil {
          transform: translate(0, #{-($eyeHeightWideScreen / 2) + ($pupilOffset * $pupilRadWideScreen)});
        }

        &.ne .pupil {
          transform: translate(#{($eyeWidthWideScreen / 4)}, #{-($eyeHeightWideScreen / 4) + ($pupilDiagonalOffset * $pupilRadWideScreen)});
        }

        &.e .pupil {
          transform: translate(#{($eyeWidthWideScreen / 2) - ($pupilOffset * $pupilRadWideScreen)}, 0);
        }

        &.se .pupil {
          transform: translate(#{($eyeWidthWideScreen / 4)}, #{($eyeHeightWideScreen / 4) - ($pupilDiagonalOffset * $pupilRadWideScreen)});
        }

        &.s .pupil {
          transform: translate(0, #{($eyeHeightWideScreen / 2) - ($pupilOffset * $pupilRadWideScreen)});
        }

        &.sw .pupil {
          transform: translate(#{-($eyeWidthWideScreen / 4)}, #{($eyeHeightWideScreen / 4) - ($pupilDiagonalOffset * $pupilRadWideScreen)});
        }

        &.w .pupil {
          transform: translate(#{-($eyeWidthWideScreen / 2) + ($pupilOffset * $pupilRadWideScreen)}, 0);
        }

        &.nw .pupil {
          transform: translate(#{-($eyeWidthWideScreen / 4)}, #{-($eyeHeightWideScreen / 4) + ($pupilDiagonalOffset * $pupilRadWideScreen)});
        }

        .pupil {
          width: #{$pupilRadWideScreen * 2};
          height: #{$pupilRadWideScreen * 2};
        }
      }
    }
  }
}
